shiny::runApp()
runApp()
View(lr_result_coefficient1)
View(lr_result_coefficient)
library(shiny)
library(sandwich)
library(lmtest)
library(quantreg)
library(ggplot2)
library(shiny)
library(shiny)
library(sandwich)
library(lmtest)
library(quantreg)
library(ggplot2)
library(shiny)
library(tidyr)
library(httr)
library(RCurl)
library(XML)
library(bitops)
library(magrittr)
library(dplyr)
library(geosphere)
library(xml2)
library(rvest)
library(ggplot2)
library(shiny)
library(tidyr)
library(httr)
library(RCurl)
library(XML)
library(bitops)
library(magrittr)
library(dplyr)
library(geosphere)
library(xml2)
library(rvest)
runApp()
runApp()
runApp()
runApp()
View(regression_output)
View(regression_output)
runApp()
runApp()
runApp()
x<- regressoin_x[1,]
predict_quantile <- c(1,x) %*% qr_result_coefficient1
x<- regressoin_x[1,]
x<- regression_x[1,]
x=as.matrix(x)
predict_quantile <- c(1,x) %*% qr_result_coefficient1
colnames(predict_quantile)
predict_quantile
View(regression_x)
mode(predict_quantile)
runApp()
runApp()
runApp()
mode(qr_result_coefficient1)
predict_quantile <- c(1,x) %*% qr_result_coefficient1
mode(predict_quantile)
predict_quantile<- as.data.frame(predict_quantile)
mode(predict_quantile)
runApp()
################################################################################################
runApp()
setwd("D:/github/project/regression2")
runApp()
runApp()
className()
?className
runApp()
runApp('D:/Rnew/store/NTU_R-master/RDemo')
runApp('D:/Rnew/store')
runApp('D:/Rnew/store')
shiny::runApp('D:/Rnew/RProject')
runApp('D:/Rnew/store')
addresspoint$lat
library(tidyr)
library(httr)
library(RCurl)
library(XML)
library(bitops)
library(magrittr)
library(dplyr)
library(geosphere)
library(xml2)
library(rvest)
library(tidyr)
library(httr)
library(RCurl)
library(XML)
library(bitops)
library(magrittr)
library(dplyr)
library(geosphere)
library(xml2)
library(rvest)
address_output<-function(x){
address_df <- data.frame(lat = 0,lng = 0,loc_type=NA)
root = "http://maps.google.com/maps/api/geocode/"
return.call = "xml"
sensor = "false"
# address_df<-c()
url_gen = paste0(root, return.call, "?address=",x, "&sensor=", sensor)
html_code<-read_xml(url_gen)
if(xml_text(xml_find_first(html_code,"//GeocodeResponse//status"))=="OK"){
lat=xml_find_first(html_code,"//result//geometry//location//lat")%>%xml_text()
lng=xml_find_first(html_code,"//result//geometry//location//lng")%>%xml_text()
loc_type=xml_find_first(html_code,"//result//geometry//location_type")%>%xml_text()
address_df[1,1] <- lat
address_df[1,2] <- lng
address_df[1,3] <- loc_type
}else if(xml_text(xml_find_first(html_code,"//GeocodeResponse//status"))=="ZERO_RESULTS"){
lat= ""
lng= ""
loc_type=""
address_df[1] <- lat
address_df[2] <- lng
address_df[3] <- loc_type
}
print(address_df)
}
addresspoint<-address_output("羅斯福路四段一號")
addresspoint$lat
address_df$lng
